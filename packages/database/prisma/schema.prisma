// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Core Models
model School {
    id           String   @id @default(uuid())
    name         String   @db.VarChar(255)
    address      String?  @db.Text
    contactEmail String?  @db.VarChar(255)
    contactPhone String?  @db.VarChar(50)
    createdAt    DateTime @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime @updatedAt @db.Timestamptz(6)

    // Relations
    users             User[]
    students          Student[]
    classes           Class[]
    teachers          Teacher[]
    parents           Parent[]
    announcements     Announcement[]
    attendanceRecords AttendanceRecord[]
    StudentParent     StudentParent[]
    StudentClass      StudentClass[]

    @@map("schools")
}

model User {
    id        String   @id @default(uuid())
    email     String   @unique @db.VarChar(255)
    password  String   @db.VarChar(255)
    role      Role     @default(STUDENT)
    schoolId  String
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)
    isActive  Boolean  @default(true)

    // Relations
    school            School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    student           Student?
    teacher           Teacher?
    parent            Parent?
    attendanceRecords AttendanceRecord[]
    announcements     Announcement[]

    @@map("users")
}

model Student {
    id               String           @id @default(uuid())
    studentId        String           @db.VarChar(50)
    firstName        String           @db.VarChar(255)
    lastName         String           @db.VarChar(255)
    dateOfBirth      DateTime?        @db.Date
    gender           String?          @db.VarChar(20)
    enrollmentStatus EnrollmentStatus @default(ACTIVE)
    schoolId         String
    userId           String?          @unique
    createdAt        DateTime         @default(now()) @db.Timestamptz(6)
    updatedAt        DateTime         @updatedAt @db.Timestamptz(6)
    isDeleted        Boolean          @default(false)

    // Relations
    school            School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    user              User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
    classes           StudentClass[]
    parents           StudentParent[]
    attendanceRecords AttendanceRecord[]

    @@unique([schoolId, studentId])
    @@map("students")
}

model Class {
    id           String   @id @default(uuid())
    name         String   @db.VarChar(255)
    academicYear String   @db.VarChar(50)
    schoolId     String
    teacherId    String?
    createdAt    DateTime @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime @updatedAt @db.Timestamptz(6)

    // Relations
    school            School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    teacher           Teacher?           @relation(fields: [teacherId], references: [id], onDelete: SetNull)
    students          StudentClass[]
    attendanceRecords AttendanceRecord[]

    @@map("classes")
}

model Teacher {
    id             String    @id @default(uuid())
    userId         String    @unique
    employeeId     String?   @db.VarChar(50)
    schoolId       String
    dateOfJoining  DateTime? @db.Date
    qualification  String?   @db.Text
    contactPhone   String?   @db.VarChar(50)
    contactAddress String?   @db.Text
    createdAt      DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt      DateTime  @updatedAt @db.Timestamptz(6)
    isDeleted      Boolean   @default(false)

    // Relations
    school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    classes Class[]

    @@unique([schoolId, employeeId])
    @@map("teachers")
}

model Parent {
    id                String   @id @default(uuid())
    userId            String?  @unique
    schoolId          String
    firstName         String   @db.VarChar(255)
    lastName          String   @db.VarChar(255)
    relationToStudent String   @db.VarChar(50)
    contactPhone      String?  @db.VarChar(50)
    contactEmail      String?  @db.VarChar(255)
    contactAddress    String?  @db.Text
    createdAt         DateTime @default(now()) @db.Timestamptz(6)
    updatedAt         DateTime @updatedAt @db.Timestamptz(6)
    isDeleted         Boolean  @default(false)

    // Relations
    school   School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    user     User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
    students StudentParent[]

    @@map("parents")
}

model StudentParent {
    studentId String
    parentId  String
    schoolId  String
    createdAt DateTime @default(now()) @db.Timestamptz(6)

    // Relations
    student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
    school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

    @@id([studentId, parentId, schoolId])
    @@map("student_parents")
}

model StudentClass {
    studentId      String
    classId        String
    schoolId       String
    enrollmentDate DateTime? @db.Date
    completionDate DateTime? @db.Date
    createdAt      DateTime  @default(now()) @db.Timestamptz(6)

    // Relations
    student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
    school  School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

    @@id([studentId, classId, schoolId])
    @@map("student_classes")
}

model AttendanceRecord {
    id           String           @id @default(uuid())
    date         DateTime         @db.Date
    status       AttendanceStatus
    sessionId    String?          @db.VarChar(50)
    studentId    String
    classId      String?
    recordedById String
    schoolId     String
    createdAt    DateTime         @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime         @updatedAt @db.Timestamptz(6)

    // Relations
    student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    class      Class?  @relation(fields: [classId], references: [id], onDelete: SetNull)
    recordedBy User    @relation(fields: [recordedById], references: [id], onDelete: Cascade)
    school     School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

    @@unique([studentId, date, sessionId, schoolId])
    @@map("attendance_records")
}

model Announcement {
    id              String   @id @default(uuid())
    title           String   @db.VarChar(255)
    content         String   @db.Text
    publishedAt     DateTime @db.Timestamptz(6)
    schoolId        String
    createdByUserId String
    audience        Json?
    createdAt       DateTime @default(now()) @db.Timestamptz(6)
    updatedAt       DateTime @updatedAt @db.Timestamptz(6)

    // Relations
    school    School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    createdBy User   @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)

    @@map("announcements")
}

// Enums
enum Role {
    ADMIN
    TEACHER
    PARENT
    STUDENT
}

enum EnrollmentStatus {
    ACTIVE
    INACTIVE
    GRADUATED
    TRANSFERRED
    SUSPENDED
}

enum AttendanceStatus {
    PRESENT
    ABSENT
    LATE
    EXCUSED
    UNEXCUSED
}
